---
- name: Deploy Node.js Application with Nginx Proxy
  hosts: all
  become: true
  
  vars_files:
    - "vars/{{ ENVIRONMENT }}_secrets.yaml"
    - "vars/{{ ENVIRONMENT }}_main.yaml"
  
  vars:
    # Default values (overridden by GitHub Actions -e flags)
    DOCKER_IMAGE_NAME: "web-app"
    DOCKER_IMAGE_TAG: "latest"
    ENVIRONMENT: "dev"
    
    # Computed variables
    docker_image_full: "{{ dockerhub_username }}/{{ DOCKER_IMAGE_NAME }}:{{ DOCKER_IMAGE_TAG }}"
    container_name: "{{ DOCKER_IMAGE_NAME }}-{{ ENVIRONMENT }}"
    nginx_container_name: "nginx-proxy-{{ ENVIRONMENT }}"
    
    # Network configuration
    docker_network_name: "app-network-{{ ENVIRONMENT }}"
    nginx_proxy_port: 80

  pre_tasks:
    - name: Display deployment information
      debug:
        msg: |
          ============================================
          DEPLOYMENT CONFIGURATION
          ============================================
          Environment: {{ ENVIRONMENT }}
          Docker Image: {{ docker_image_full }}
          Container Name: {{ container_name }}
          Nginx Container: {{ nginx_container_name }}
          Host Port: {{ host_port }}
          Container Port: {{ container_port }}
          Nginx Proxy Port: {{ nginx_proxy_port }}
          Git SHA: {{ DOCKER_IMAGE_TAG }}
          ============================================

    - name: Check if Docker is installed
      command: docker --version
      register: docker_check
      ignore_errors: true
      changed_when: false
      
    - name: Display Docker status
      debug:
        msg: |
          Docker Status:
          - Return Code: {{ docker_check.rc }}
          - Output: {{ docker_check.stdout if docker_check.rc == 0 else docker_check.stderr }}
          - Docker Installation Needed: {{ docker_check.rc != 0 }}

  roles:
    - role: geerlingguy.docker
      when: docker_check.rc != 0
      vars:
        docker_users: 
          - reus
        docker_install_compose: true
        docker_daemon_options:
          log-driver: "json-file"
          log-opts:
            max-size: "10m"
            max-file: "3"

  tasks:
    # Create Docker network for container communication
    - name: Create Docker network
      community.docker.docker_network:
        name: "{{ docker_network_name }}"
        state: present
      register: docker_network

    - name: Display network info
      debug:
        msg: "Docker network '{{ docker_network_name }}' created/verified"

    # Create Nginx configuration
    - name: Create Nginx config directory
      file:
        path: "/etc/nginx/{{ ENVIRONMENT }}"
        state: directory
        mode: '0755'

    - name: Deploy Nginx configuration from template
      template:
        src: "template/nginx-proxy.conf.j2"
        dest: "/etc/nginx/{{ ENVIRONMENT }}/default.conf"
        mode: '0644'
      register: nginx_config

    # Deploy Web Application
    - name: Verify Docker Hub credentials
      debug:
        msg: "Docker Hub Username: {{ dockerhub_username }}"
  
    - name: Log in to Docker Hub
      community.docker.docker_login:
        username: "{{ dockerhub_username }}"
        password: "{{ dockerhub_password }}"
        registry_url: "https://index.docker.io/v1/"

    - name: Pull latest Docker image
      community.docker.docker_image:
        name: "{{ dockerhub_username }}/{{ DOCKER_IMAGE_NAME }}"
        tag: "{{ DOCKER_IMAGE_TAG }}"
        source: pull
        force_source: yes
      register: image_pull_result

    - name: Display image pull result
      debug:
        msg: "Successfully pulled image: {{ docker_image_full }}"
      when: image_pull_result is succeeded

    - name: Get current app container status
      community.docker.docker_container_info:
        name: "{{ container_name }}"
      register: container_info
      ignore_errors: true

    - name: Stop existing app container
      community.docker.docker_container:
        name: "{{ container_name }}"
        state: stopped
      when: container_info.exists and container_info.container.State.Running
      ignore_errors: true

    - name: Remove existing app container
      community.docker.docker_container:
        name: "{{ container_name }}"
        state: absent
      when: container_info.exists
      ignore_errors: true

    - name: Deploy Web Application container
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: "{{ docker_image_full }}"
        state: started
        restart_policy: unless-stopped
        networks:
          - name: "{{ docker_network_name }}"
        env:
          NODE_ENV: "{{ ENVIRONMENT }}"
          APP_VERSION: "{{ DOCKER_IMAGE_TAG }}"
          PORT: "{{ container_port }}"
        labels:
          app: "{{ DOCKER_IMAGE_NAME }}"
          environment: "{{ ENVIRONMENT }}"
          version: "{{ DOCKER_IMAGE_TAG }}"
          deployed_at: "{{ ansible_date_time.iso8601 }}"
          deployed_by: "ansible"
        pull: false
        detach: true
        healthcheck:
          test: ["CMD-SHELL", "curl -f http://localhost:{{ container_port }} || exit 1"]
          interval: 30s
          timeout: 10s
          retries: 3
          start_period: 40s
      register: container_deploy

    - name: Wait for application container to be ready
      wait_for:
        timeout: 30
      delegate_to: localhost

    # Deploy Nginx Proxy
    - name: Get current Nginx container status
      community.docker.docker_container_info:
        name: "{{ nginx_container_name }}"
      register: nginx_info
      ignore_errors: true

    - name: Stop existing Nginx container
      community.docker.docker_container:
        name: "{{ nginx_container_name }}"
        state: stopped
      when: nginx_info.exists and nginx_info.container.State.Running
      ignore_errors: true

    - name: Remove existing Nginx container
      community.docker.docker_container:
        name: "{{ nginx_container_name }}"
        state: absent
      when: nginx_info.exists
      ignore_errors: true

    - name: Deploy Nginx Proxy container
      community.docker.docker_container:
        name: "{{ nginx_container_name }}"
        image: "nginx:alpine"
        state: started
        restart_policy: unless-stopped
        networks:
          - name: "{{ docker_network_name }}"
        ports:
          - "{{ nginx_proxy_port }}:80"
        volumes:
          - "/etc/nginx/{{ ENVIRONMENT }}/default.conf:/etc/nginx/conf.d/default.conf:ro"
        labels:
          app: "nginx-proxy"
          environment: "{{ ENVIRONMENT }}"
          proxy_for: "{{ DOCKER_IMAGE_NAME }}"
          deployed_at: "{{ ansible_date_time.iso8601 }}"
        pull: true
        detach: true
      register: nginx_deploy

    - name: Wait for Nginx to be ready
      wait_for:
        timeout: 10
      delegate_to: localhost

    # Verification
    - name: Verify application is responding through Nginx
      uri:
        url: "http://localhost:{{ nginx_proxy_port }}/health"
        status_code: 200
        timeout: 5
      register: app_response
      retries: 10
      delay: 3
      until: app_response.status == 200

    - name: Display container logs (web app - last 20 lines)
      command: docker logs --tail 20 {{ container_name }}
      register: container_logs
      changed_when: false

    - name: Show web app container logs
      debug:
        msg: "{{ container_logs.stdout_lines }}"

    - name: Display Nginx logs (last 10 lines)
      command: docker logs --tail 10 {{ nginx_container_name }}
      register: nginx_logs
      changed_when: false

    - name: Show Nginx logs
      debug:
        msg: "{{ nginx_logs.stdout_lines }}"

    - name: Clean up old Docker images (keep last 3 versions)
      shell: |
        docker images {{ dockerhub_username }}/{{ DOCKER_IMAGE_NAME }} --format "{{ '{{' }}.ID{{ '}}' }} {{ '{{' }}.Tag{{ '}}' }}" | \
        grep -v "{{ DOCKER_IMAGE_TAG }}" | \
        tail -n +3 | \
        awk '{print $1}' | \
        xargs -r docker rmi -f
      ignore_errors: true
      when: ENVIRONMENT == "production"
      register: cleanup_result

    - name: Log deployment to file
      lineinfile:
        path: "/var/log/{{ DOCKER_IMAGE_NAME }}-deployments.log"
        line: "{{ ansible_date_time.iso8601 }} | {{ ENVIRONMENT }} | {{ DOCKER_IMAGE_TAG }} | {{ dockerhub_username }}/{{ DOCKER_IMAGE_NAME }}:{{ DOCKER_IMAGE_TAG }} | Nginx:{{ nginx_proxy_port }} | {{ ansible_user }}"
        create: yes
        mode: '0644'

    - name: Deployment summary
      debug:
        msg: |
          ============================================
          DEPLOYMENT SUCCESSFUL
          ============================================
          Web App Container: {{ container_name }}
          Web App Image: {{ docker_image_full }}
          Web App Status: {{ container_deploy.container.State.Status }}
          
          Nginx Proxy Container: {{ nginx_container_name }}
          Nginx Image: nginx:alpine
          Nginx Status: {{ nginx_deploy.container.State.Status }}
          
          Network: {{ docker_network_name }}
          Public Access: http://{{ ansible_default_ipv4.address }}:{{ nginx_proxy_port }}
          
          Architecture:
          Client -> Nginx (port {{ nginx_proxy_port }}) -> Web App (port {{ container_port }})
          ============================================

  post_tasks:
    - name: Send deployment notification
      debug:
        msg: "Deployment of {{ docker_image_full }} with Nginx proxy to {{ ENVIRONMENT }} completed successfully!"