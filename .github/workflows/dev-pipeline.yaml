name: Dev Node.js Pipeline

on:
  push:
    branches: [dev]

env:
  APP_PORT: 4000

jobs:
  test:
    uses: ./.github/workflows/test-node.yaml
    permissions:
      contents: write
    with:
      environment: dev
    secrets: inherit

 


  # test:
  #   name: Test Application
  #   runs-on: ubuntu-latest
  #   environment: dev
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ vars.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and load Docker image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: .
  #         load: true
  #         tags: |
  #           ${{ env.DOCKER_IMAGE_NAME }}:latest
  #           ${{ vars.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
  #           ${{ vars.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  #     - name: Run application container
  #       run: |
  #         docker run -d \
  #           -p ${{ env.APP_PORT }}:${{ env.APP_PORT }} \
  #           --name ${{ env.CONTAINER_NAME }} \
  #           --health-cmd="curl -f http://localhost:${{ env.APP_PORT }} || exit 1" \
  #           --health-interval=5s \
  #           --health-timeout=3s \
  #           --health-retries=3 \
  #           ${{ env.DOCKER_IMAGE_NAME }}:latest

  #     - name: View container logs on failure
  #       if: failure()
  #       run: docker logs ${{ env.CONTAINER_NAME }}

  #     - name: Push to Docker Hub
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: .
  #         push: true
  #         tags: |
  #           ${{ vars.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
  #           ${{ vars.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  #     - name: Cleanup
  #       if: always()
  #       run: |
  #         docker stop ${{ env.CONTAINER_NAME }} || true
  #         docker rm ${{ env.CONTAINER_NAME }} || true

  # deploy:
  #   name: Deploy Application
  #   runs-on: ubuntu-latest
  #   environment: dev
  #   needs: test
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ vars.AWS_REGION }}

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.11'

  #     - name: Install Python dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install boto3 ansible

  #     - name: Verify Ansible installation
  #       run: ansible --version

  #     - name: Install Ansible collections and roles
  #       run: |
  #         ansible-galaxy collection install amazon.aws community.aws
  #         ansible-galaxy role install geerlingguy.docker

  #     - name: Configure SSH key
  #       run: |
  #         mkdir -p ~/.ssh
  #         echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/dev-server.pem
  #         chmod 600 ~/.ssh/dev-server.pem

  #     - name: Create Ansible vault password file
  #       run: |
  #         echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > ~/.vault_password
  #         chmod 600 ~/.vault_password

  #     - name: Run Ansible playbook
  #       working-directory: ./ansible
  #       run: |
  #         ansible-playbook playbook.yaml \
  #           -e ansible_private_key_file=~/.ssh/dev-server.pem \
  #           -e ENVIRONMENT=dev \
  #           -e DOCKER_IMAGE_TAG=${{ github.sha }} \
  #           --vault-password-file ~/.vault_password

  #     - name: Cleanup sensitive files
  #       if: always()
  #       run: |
  #         rm -f ~/.ssh/dev-server.pem
  #         rm -f ~/.vault_password